/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * IBM OpenAPI SDK Code Generator Version: 3.43.0-49eab5c7-20211117-152138
 */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import {
  Authenticator,
  BaseService,
  getAuthenticatorFromEnvironment,
  getMissingParams,
  UserOptions,
} from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API Version: 1.0
 */

class EventNotificationsV1 extends BaseService {
  static DEFAULT_SERVICE_URL: string = 'https://us-south.event-notifications.cloud.ibm.com/event-notifications';

  static DEFAULT_SERVICE_NAME: string = 'event_notifications';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of EventNotificationsV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {EventNotificationsV1}
   */

  public static newInstance(options: UserOptions): EventNotificationsV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new EventNotificationsV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }

  /**
   * Construct a EventNotificationsV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {EventNotificationsV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(EventNotificationsV1.DEFAULT_SERVICE_URL);
    }
  }

  /*************************
   * sources
   ************************/

  /**
   * List all Sources.
   *
   * List all Sources.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.SourceList>>}
   */
  public listSources(
    params: EventNotificationsV1.ListSourcesParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.SourceList>> {
    const _params = { ...params };
    const requiredParams = ['instanceId'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const query = {
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listSources'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/sources',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get a Source.
   *
   * Get a Sources.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Source.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Source>>}
   */
  public getSource(
    params: EventNotificationsV1.GetSourceParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Source>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getSource'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/sources/{id}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * topics
   ************************/

  /**
   * Create a new Topic.
   *
   * Create a new Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.name - Name of the topic.
   * @param {string} [params.description] - Description of the topic.
   * @param {TopicUpdateSourcesItem[]} [params.sources] - List of sources.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicResponse>>}
   */
  public createTopic(
    params: EventNotificationsV1.CreateTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicResponse>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'name'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'sources': _params.sources,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTopic'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Topics.
   *
   * List all Topics.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicList>>}
   */
  public listTopics(
    params: EventNotificationsV1.ListTopicsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicList>> {
    const _params = { ...params };
    const requiredParams = ['instanceId'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const query = {
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listTopics'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get details of a Topic.
   *
   * Get details of a Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Topic.
   * @param {string} [params.include] - Include sub topics.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>>}
   */
  public getTopic(
    params: EventNotificationsV1.GetTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const query = {
      'include': _params.include,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getTopic'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update details of a Topic.
   *
   * Update details of a Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Topic.
   * @param {string} [params.name] - Name of the topic.
   * @param {string} [params.description] - Description of the topic.
   * @param {TopicUpdateSourcesItem[]} [params.sources] - List of sources.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>>}
   */
  public replaceTopic(
    params: EventNotificationsV1.ReplaceTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'sources': _params.sources,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'replaceTopic'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics/{id}',
        method: 'PUT',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Topic.
   *
   * Delete a Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Topic.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteTopic(
    params: EventNotificationsV1.DeleteTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteTopic'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics/{id}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * destinations
   ************************/

  /**
   * Create a new Destination.
   *
   * Create a new Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.name - The Destintion name.
   * @param {string} params.type - The type of Destination Webhook.
   * @param {string} [params.description] - The Destination description.
   * @param {DestinationConfig} [params.config] - Payload describing a destination configuration.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationResponse>>}
   */
  public createDestination(
    params: EventNotificationsV1.CreateDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationResponse>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'name', 'type'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const body = {
      'name': _params.name,
      'type': _params.type,
      'description': _params.description,
      'config': _params.config,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Destinations.
   *
   * List all Destinations.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationList>>}
   */
  public listDestinations(
    params: EventNotificationsV1.ListDestinationsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationList>> {
    const _params = { ...params };
    const requiredParams = ['instanceId'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const query = {
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listDestinations'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get details of a Destination.
   *
   * Get details of a Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>>}
   */
  public getDestination(
    params: EventNotificationsV1.GetDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update details of a Destination.
   *
   * Update details of a Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {string} [params.name] - Destination name.
   * @param {string} [params.description] - Destination description.
   * @param {DestinationConfig} [params.config] - Payload describing a destination configuration.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>>}
   */
  public updateDestination(
    params: EventNotificationsV1.UpdateDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'config': _params.config,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Destination.
   *
   * Delete a Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteDestination(
    params: EventNotificationsV1.DeleteDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * subscriptions
   ************************/

  /**
   * Create a new Subscription.
   *
   * Create a new Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.name - Subscription name.
   * @param {string} params.destinationId - Destination ID.
   * @param {string} params.topicId - Topic ID.
   * @param {SubscriptionCreateAttributes} params.attributes -
   * @param {string} [params.description] - Subscription description.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>>}
   */
  public createSubscription(
    params: EventNotificationsV1.CreateSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'name', 'destinationId', 'topicId', 'attributes'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const body = {
      'name': _params.name,
      'destination_id': _params.destinationId,
      'topic_id': _params.topicId,
      'attributes': _params.attributes,
      'description': _params.description,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Subscriptions.
   *
   * List all Subscriptions.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.SubscriptionList>>}
   */
  public listSubscriptions(
    params: EventNotificationsV1.ListSubscriptionsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.SubscriptionList>> {
    const _params = { ...params };
    const requiredParams = ['instanceId'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const query = {
      'offset': _params.offset,
      'limit': _params.limit,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listSubscriptions'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get details of a Subscription.
   *
   * Get details of a Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Subscription.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>>}
   */
  public getSubscription(
    params: EventNotificationsV1.GetSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions/{id}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Subscription.
   *
   * Delete a Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Subscription.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteSubscription(
    params: EventNotificationsV1.DeleteSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions/{id}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update details of a Subscription.
   *
   * Update details of a Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Subscription.
   * @param {string} [params.name] - Name of the subscription.
   * @param {string} [params.description] - Description of the subscription.
   * @param {SubscriptionUpdateAttributes} [params.attributes] -
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>>}
   */
  public updateSubscription(
    params: EventNotificationsV1.UpdateSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>> {
    const _params = { ...params };
    const requiredParams = ['instanceId', 'id'];

    const missingParams = getMissingParams(_params, requiredParams);
    if (missingParams) {
      return Promise.reject(missingParams);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'attributes': _params.attributes,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions/{id}',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
}

/*************************
 * interfaces
 ************************/

namespace EventNotificationsV1 {
  /** An operation response. */
  export interface Response<T = any> {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface Empty {}

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `listSources` operation. */
  export interface ListSourcesParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getSource` operation. */
  export interface GetSourceParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Source. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTopic` operation. */
  export interface CreateTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Name of the topic. */
    name: string;
    /** Description of the topic. */
    description?: string;
    /** List of sources. */
    sources?: TopicUpdateSourcesItem[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTopics` operation. */
  export interface ListTopicsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTopic` operation. */
  export interface GetTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Topic. */
    id: string;
    /** Include sub topics. */
    include?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `replaceTopic` operation. */
  export interface ReplaceTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Topic. */
    id: string;
    /** Name of the topic. */
    name?: string;
    /** Description of the topic. */
    description?: string;
    /** List of sources. */
    sources?: TopicUpdateSourcesItem[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteTopic` operation. */
  export interface DeleteTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Topic. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createDestination` operation. */
  export interface CreateDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** The Destintion name. */
    name: string;
    /** The type of Destination Webhook. */
    type: CreateDestinationConstants.Type | string;
    /** The Destination description. */
    description?: string;
    /** Payload describing a destination configuration. */
    config?: DestinationConfig;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createDestination` operation. */
  export namespace CreateDestinationConstants {
    /** The type of Destination Webhook. */
    export enum Type {
      WEBHOOK = 'webhook',
    }
  }

  /** Parameters for the `listDestinations` operation. */
  export interface ListDestinationsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getDestination` operation. */
  export interface GetDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateDestination` operation. */
  export interface UpdateDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** Destination name. */
    name?: string;
    /** Destination description. */
    description?: string;
    /** Payload describing a destination configuration. */
    config?: DestinationConfig;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteDestination` operation. */
  export interface DeleteDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createSubscription` operation. */
  export interface CreateSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Subscription name. */
    name: string;
    /** Destination ID. */
    destinationId: string;
    /** Topic ID. */
    topicId: string;
    attributes: SubscriptionCreateAttributes;
    /** Subscription description. */
    description?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listSubscriptions` operation. */
  export interface ListSubscriptionsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** offset for paginated results. */
    offset?: number;
    /** Page limit for paginated results. */
    limit?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getSubscription` operation. */
  export interface GetSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Subscription. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteSubscription` operation. */
  export interface DeleteSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Subscription. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateSubscription` operation. */
  export interface UpdateSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Subscription. */
    id: string;
    /** Name of the subscription. */
    name?: string;
    /** Description of the subscription. */
    description?: string;
    attributes?: SubscriptionUpdateAttributes;
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** Payload describing a destination get request. */
  export interface Destination {
    /** Destination ID. */
    id: string;
    /** Destination name. */
    name: string;
    /** Destination description. */
    description: string;
    /** Destination type Email/SMS/Webhook. */
    type: string;
    /** Payload describing a destination configuration. */
    config?: DestinationConfig;
    /** Last updated time. */
    updated_at: string;
    /** Number of subscriptions. */
    subscription_count: number;
    /** List of subscriptions. */
    subscription_names: string[];
  }

  /** Payload describing a destination configuration. */
  export interface DestinationConfig {
    params: DestinationConfigParams;
  }

  /** DestinationConfigParams. */
  export interface DestinationConfigParams {
  }

  /** Destination object. */
  export interface DestinationLisItem {
    /** Destination ID. */
    id: string;
    /** Destination name. */
    name: string;
    /** Destination description. */
    description: string;
    /** Destination type Email/SMS/Webhook. */
    type: string;
    /** Subscription count. */
    subscription_count: number;
    /** Names of subscriptions. */
    subscription_names: string[];
    /** Updated at. */
    updated_at: string;
  }

  /** Payload describing a destination list request. */
  export interface DestinationList {
    /** Total number of destinations. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show destinations. */
    limit: number;
    /** List of destinations. */
    destinations: DestinationLisItem[];
  }

  /** Payload describing a destination get request. */
  export interface DestinationResponse {
    /** Destination ID. */
    id: string;
    /** Destination name. */
    name: string;
    /** Destination description. */
    description: string;
    /** Destination type Email/SMS/Webhook. */
    type: string;
    /** Payload describing a destination configuration. */
    config: DestinationConfig;
    /** Last updated time. */
    created_at: string;
  }

  /** The email ids. */
  export interface EmailUpdateAttributesTo {
    /** The email ids. */
    add?: string[];
    /** The email ids for removal. */
    remove?: string[];
  }

  /** The email ids. */
  export interface EmailUpdateAttributesUnsubscribed {
    /** The email ids unsubscribed. */
    remove?: string[];
  }

  /** Rule object. */
  export interface Rules {
    /** Whether the rule is enabled or not. */
    enabled?: boolean;
    /** Event type filter. */
    event_type_filter: string;
    /** Notification filter. */
    notification_filter?: string;
  }

  /** Rule object. */
  export interface RulesGet {
    /** Whether the rule is enabled or not. */
    enabled: boolean;
    /** Event type filter. */
    event_type_filter: string;
    /** Notification filter. */
    notification_filter: string;
    /** Last time the topic was updated. */
    updated_at: string;
    /** Autogenerated rule ID. */
    id: string;
  }

  /** Payload describing a source generate request. */
  export interface Source {
    /** The id of the source. */
    id: string;
    /** The name of the source. */
    name: string;
    /** The description of the source. */
    description: string;
    /** The status of the source. */
    enabled: boolean;
    /** Type of the source. */
    type: string;
    /** The last updated time of the source. */
    updated_at: string;
    /** The number of topics. */
    topic_count: number;
    /** The names of the topics. */
    topic_names: string[];
  }

  /** Payload describing a source list request. */
  export interface SourceList {
    /** Number of sources. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show sources. */
    limit: number;
    /** List of sources. */
    sources: SourcesListItem[];
  }

  /** Payload describing a source list item. */
  export interface SourcesListItem {
    /** ID of the source. */
    id: string;
    /** Name of the source. */
    name: string;
    /** Description of the source. */
    description: string;
    /** Type of the source. */
    type: string;
    /** Whether the source is enabled or not. */
    enabled: boolean;
    /** Time of the last update. */
    updated_at: string;
    /** Number of topics. */
    topic_count: number;
  }

  /** Subscription object. */
  export interface Subscription {
    /** Subscription ID. */
    id: string;
    /** Subscription name. */
    name: string;
    /** Subscription description. */
    description: string;
    /** Last updated time. */
    updated_at: string;
    /** From Email ID (it will be displayed only in case of smtp_ibm destination type). */
    from?: string;
    /** The type of destination. */
    destination_type: string;
    /** The destination ID. */
    destination_id: string;
    /** The destination name. */
    destination_name: string;
    /** Topic ID. */
    topic_id: string;
    /** Topic name. */
    topic_name: string;
    attributes: SubscriptionAttributes;
    /** Subscription accepts additional properties. */
    [propName: string]: any;
  }

  /** SubscriptionAttributes. */
  export interface SubscriptionAttributes {
    /** SubscriptionAttributes accepts additional properties. */
    [propName: string]: any;
  }

  /** SubscriptionCreateAttributes. */
  export interface SubscriptionCreateAttributes {
  }

  /** Subscription list object. */
  export interface SubscriptionList {
    /** Number of subscriptions. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show subscriptions. */
    limit: number;
    /** List of subscriptions. */
    subscriptions: SubscriptionListItem[];
  }

  /** Subscription list item. */
  export interface SubscriptionListItem {
    /** ID of the subscription. */
    id: string;
    /** Name of the subscription. */
    name: string;
    /** Description of the subscription. */
    description: string;
    /** ID of the destination. */
    destination_id: string;
    /** Name of the destination. */
    destination_name?: string;
    /** The type of destination. */
    destination_type: string;
    /** ID of the topic. */
    topic_id: string;
    /** Name of the topic. */
    topic_name?: string;
    /** Last updated time of the subscription. */
    updated_at: string;
  }

  /** SubscriptionUpdateAttributes. */
  export interface SubscriptionUpdateAttributes {
  }

  /** Topic object. */
  export interface Topic {
    /** Autogenerated topic ID. */
    id: string;
    /** Description of the topic. */
    description: string;
    /** Name of the topic. */
    name: string;
    /** Last time the topic was updated. */
    updated_at: string;
    /** Number of sources. */
    source_count: number;
    /** List of sources. */
    sources: TopicSourcesItem[];
    /** Number of subscriptions. */
    subscription_count: number;
    /** List of subscriptions. */
    subscriptions: SubscriptionListItem[];
  }

  /** Topic list object. */
  export interface TopicList {
    /** Number of topics. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show subscriptions. */
    limit: number;
    /** List of topics. */
    topics: TopicsListItem[];
  }

  /** Topic object. */
  export interface TopicResponse {
    /** Autogenerated topic ID. */
    id: string;
    /** Name of the topic. */
    name: string;
    /** Description of the topic. */
    description: string;
    /** Last time the topic was updated. */
    created_at: string;
  }

  /** TopicSourcesItem. */
  export interface TopicSourcesItem {
    /** ID of the source. */
    id: string;
    /** Name of the source. */
    name: string;
    /** List of rules. */
    rules: RulesGet[];
  }

  /** TopicUpdateSourcesItem. */
  export interface TopicUpdateSourcesItem {
    /** ID of the source. */
    id: string;
    /** List of rules. */
    rules: Rules[];
  }

  /** Topic list item object. */
  export interface TopicsListItem {
    /** Autogenerated topic ID. */
    id: string;
    /** Name of the topic. */
    name: string;
    /** Description of the topic. */
    description: string;
    /** Number of sources. */
    source_count: number;
    /** List of source names. */
    sources_names: string[];
    /** Number of subscriptions. */
    subscription_count: number;
  }

  /** Payload describing a webhook destination configuration. */
  export interface DestinationConfigParamsWebhookDestinationConfig extends DestinationConfigParams {
    /** URL of webhook. */
    url: string;
    /** HTTP method of webhook. */
    verb: string;
    /** Custom headers (Key-Value pair) for webhook call. */
    custom_headers?: JsonObject;
    /** List of sensitive headers from custom headers. */
    sensitive_headers?: string[];
  }

  /** The attributes reponse for an email destination. */
  export interface SubscriptionAttributesEmailAttributesResponse extends SubscriptionAttributes {
  }

  /** SMS attributes object. */
  export interface SubscriptionAttributesSMSAttributesResponse extends SubscriptionAttributes {
  }

  /** The attributes for a webhook notification. */
  export interface SubscriptionAttributesWebhookAttributesResponse extends SubscriptionAttributes {
    /** Signing webhook attributes. */
    signing_enabled: boolean;
    /** Decision for Notification Payload to be added. */
    add_notification_payload: boolean;
  }

  /** The attributes for an email notification. */
  export interface SubscriptionCreateAttributesEmailAttributes extends SubscriptionCreateAttributes {
    /** The email id string. */
    to: string[];
    /** Whether to add the notification payload to the email. */
    add_notification_payload: boolean;
    /** The email address to reply to. */
    reply_to_mail: string;
    /** The email name to reply to. */
    reply_to_name: string;
    /** The email name of From. */
    from_name: string;
  }

  /** SMS attributes object. */
  export interface SubscriptionCreateAttributesSMSAttributes extends SubscriptionCreateAttributes {
    /** The phone number to send the SMS to. */
    to: string[];
  }

  /** The attributes for a webhook notification. */
  export interface SubscriptionCreateAttributesWebhookAttributes extends SubscriptionCreateAttributes {
    /** Signing webhook attributes. */
    signing_enabled: boolean;
  }

  /** The attributes for an email notification. */
  export interface SubscriptionUpdateAttributesEmailUpdateAttributes extends SubscriptionUpdateAttributes {
    /** The email ids. */
    to: EmailUpdateAttributesTo;
    /** Whether to add the notification payload to the email. */
    add_notification_payload: boolean;
    /** The email address to reply to. */
    reply_to_mail: string;
    /** The email name to reply to. */
    reply_to_name: string;
    /** The email name of From. */
    from_name: string;
    /** The email ids invited. */
    invited?: string[];
    /** The email ids. */
    unsubscribed?: EmailUpdateAttributesUnsubscribed;
  }

  /** SMS attributes object. */
  export interface SubscriptionUpdateAttributesSMSAttributes extends SubscriptionUpdateAttributes {
    /** The phone number to send the SMS to. */
    to: string[];
  }

  /** The attributes for a webhook notification. */
  export interface SubscriptionUpdateAttributesWebhookAttributes extends SubscriptionUpdateAttributes {
    /** Signing webhook attributes. */
    signing_enabled: boolean;
  }
}

export = EventNotificationsV1;
