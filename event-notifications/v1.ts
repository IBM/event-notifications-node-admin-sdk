/**
 * (C) Copyright IBM Corp. 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * IBM OpenAPI SDK Code Generator Version: 3.46.0-a4e29da0-20220224-210428
 */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import {
  Authenticator,
  BaseService,
  getAuthenticatorFromEnvironment,
  validateParams,
  UserOptions,
} from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API Version: 1.0
 */

class EventNotificationsV1 extends BaseService {
  static DEFAULT_SERVICE_URL: string =
    'https://us-south.event-notifications.cloud.ibm.com/event-notifications';

  static DEFAULT_SERVICE_NAME: string = 'event_notifications';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of EventNotificationsV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {EventNotificationsV1}
   */

  public static newInstance(options: UserOptions): EventNotificationsV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new EventNotificationsV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }

  /**
   * Construct a EventNotificationsV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {EventNotificationsV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(EventNotificationsV1.DEFAULT_SERVICE_URL);
    }
  }

  /*************************
   * sendNotifications
   ************************/

  /**
   * Send a notification.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {NotificationCreate} [params.body] -
   * @param {string} [params.ceIbmenseverity] - The Notification severity.
   * @param {string} [params.ceIbmendefaultshort] - The Notification default short text.
   * @param {string} [params.ceIbmendefaultlong] - The Notification default long text.
   * @param {string} [params.ceIbmenfcmbody] - The FCM Notification body.
   * @param {string} [params.ceIbmenapnsbody] - The APNS Notification body.
   * @param {string} [params.ceIbmenpushto] - Push Notifications Targets.
   * @param {string} [params.ceIbmenapnsheaders] - Push Notifications APNS Headers.
   * @param {string} [params.ceIbmenchromebody] - Push Notifications Chrome body.
   * @param {string} [params.ceIbmenfirefoxbody] - Push Notifications Firefox body.
   * @param {string} [params.ceIbmenchromeheaders] - Push Notifications Chrome Headers.
   * @param {string} [params.ceIbmenfirefoxheaders] - Push Notifications Firefox Headers.
   * @param {string} [params.ceIbmensourceid] - Event Notifications Target source ID.
   * @param {string} [params.ceId] - custom ID to track notifications from client side (Mandatory identifier for the
   * binary mode).
   * @param {string} [params.ceSource] - custom source odentifier from the client side.
   * @param {string} [params.ceType] - Type identifier for source filters.
   * @param {string} [params.ceSpecversion] - Version of the Cloud Event specification (Mandatory header to make the
   * request Binary Mode).
   * @param {string} [params.ceTime] - The time of the notification.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.NotificationResponse>>}
   */
  public sendNotifications(
    params: EventNotificationsV1.SendNotificationsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.NotificationResponse>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId'];
    const _validParams = [
      'instanceId',
      'body',
      'ceIbmenseverity',
      'ceIbmendefaultshort',
      'ceIbmendefaultlong',
      'ceIbmenfcmbody',
      'ceIbmenapnsbody',
      'ceIbmenpushto',
      'ceIbmenapnsheaders',
      'ceIbmenchromebody',
      'ceIbmenfirefoxbody',
      'ceIbmenchromeheaders',
      'ceIbmenfirefoxheaders',
      'ceIbmensourceid',
      'ceId',
      'ceSource',
      'ceType',
      'ceSpecversion',
      'ceTime',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const { body } = _params;
    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'sendNotifications'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/notifications',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'ce-ibmenseverity': _params.ceIbmenseverity,
            'ce-ibmendefaultshort': _params.ceIbmendefaultshort,
            'ce-ibmendefaultlong': _params.ceIbmendefaultlong,
            'ce-ibmenfcmbody': _params.ceIbmenfcmbody,
            'ce-ibmenapnsbody': _params.ceIbmenapnsbody,
            'ce-ibmenpushto': _params.ceIbmenpushto,
            'ce-ibmenapnsheaders': _params.ceIbmenapnsheaders,
            'ce-ibmenchromebody': _params.ceIbmenchromebody,
            'ce-ibmenfirefoxbody': _params.ceIbmenfirefoxbody,
            'ce-ibmenchromeheaders': _params.ceIbmenchromeheaders,
            'ce-ibmenfirefoxheaders': _params.ceIbmenfirefoxheaders,
            'ce-ibmensourceid': _params.ceIbmensourceid,
            'ce-id': _params.ceId,
            'ce-source': _params.ceSource,
            'ce-type': _params.ceType,
            'ce-specversion': _params.ceSpecversion,
            'ce-time': _params.ceTime,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Send Bulk notification.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {NotificationCreate[]} [params.bulkMessages] - List of notifications body.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.BulkNotificationResponse>>}
   */
  public sendBulkNotifications(
    params: EventNotificationsV1.SendBulkNotificationsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.BulkNotificationResponse>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId'];
    const _validParams = ['instanceId', 'bulkMessages', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'bulk_messages': _params.bulkMessages,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'sendBulkNotifications'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/notifications/bulk',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * sources
   ************************/

  /**
   * Create a new API Source.
   *
   * Create a new API Source.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.name - Name of the source.
   * @param {string} params.description - Description of the source.
   * @param {boolean} [params.enabled] - Whether the source is enabled or not.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.SourceResponse>>}
   */
  public createSources(
    params: EventNotificationsV1.CreateSourcesParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.SourceResponse>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'name', 'description'];
    const _validParams = ['instanceId', 'name', 'description', 'enabled', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'enabled': _params.enabled,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createSources'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/sources',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Sources.
   *
   * List all Sources.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.SourceList>>}
   */
  public listSources(
    params: EventNotificationsV1.ListSourcesParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.SourceList>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId'];
    const _validParams = ['instanceId', 'limit', 'offset', 'search', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listSources'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/sources',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get a Source.
   *
   * Get a Sources.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Source.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Source>>}
   */
  public getSource(
    params: EventNotificationsV1.GetSourceParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Source>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(EventNotificationsV1.DEFAULT_SERVICE_NAME, 'v1', 'getSource');

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/sources/{id}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Source.
   *
   * Delete a Source.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Source.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteSource(
    params: EventNotificationsV1.DeleteSourceParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteSource'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/sources/{id}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(true, sdkHeaders, {}, _params.headers),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update details of a Source.
   *
   * Update details of a Source.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Source.
   * @param {string} [params.name] - Name of the source.
   * @param {string} [params.description] - Description of the source.
   * @param {boolean} [params.enabled] - Whether the source is enabled or not.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Source>>}
   */
  public updateSource(
    params: EventNotificationsV1.UpdateSourceParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Source>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'name', 'description', 'enabled', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'enabled': _params.enabled,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateSource'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/sources/{id}',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * topics
   ************************/

  /**
   * Create a new Topic.
   *
   * Create a new Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.name - Name of the topic.
   * @param {string} [params.description] - Description of the topic.
   * @param {TopicUpdateSourcesItem[]} [params.sources] - List of sources.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicResponse>>}
   */
  public createTopic(
    params: EventNotificationsV1.CreateTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicResponse>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'name'];
    const _validParams = ['instanceId', 'name', 'description', 'sources', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'sources': _params.sources,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTopic'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Topics.
   *
   * List all Topics.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicList>>}
   */
  public listTopics(
    params: EventNotificationsV1.ListTopicsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.TopicList>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId'];
    const _validParams = ['instanceId', 'limit', 'offset', 'search', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(EventNotificationsV1.DEFAULT_SERVICE_NAME, 'v1', 'listTopics');

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get details of a Topic.
   *
   * Get details of a Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Topic.
   * @param {string} [params.include] - Include sub topics.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>>}
   */
  public getTopic(
    params: EventNotificationsV1.GetTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'include', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'include': _params.include,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(EventNotificationsV1.DEFAULT_SERVICE_NAME, 'v1', 'getTopic');

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update details of a Topic.
   *
   * Update details of a Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Topic.
   * @param {string} [params.name] - Name of the topic.
   * @param {string} [params.description] - Description of the topic.
   * @param {TopicUpdateSourcesItem[]} [params.sources] - List of sources.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>>}
   */
  public replaceTopic(
    params: EventNotificationsV1.ReplaceTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Topic>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'name', 'description', 'sources', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'sources': _params.sources,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'replaceTopic'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics/{id}',
        method: 'PUT',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Topic.
   *
   * Delete a Topic.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Topic.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteTopic(
    params: EventNotificationsV1.DeleteTopicParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteTopic'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/topics/{id}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(true, sdkHeaders, {}, _params.headers),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * destinations
   ************************/

  /**
   * Create a new Destination.
   *
   * Create a new Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.name - The Destintion name.
   * @param {string} params.type - The type of Destination Webhook.
   * @param {string} [params.description] - The Destination description.
   * @param {DestinationConfig} [params.config] - Payload describing a destination configuration.
   * @param {NodeJS.ReadableStream | Buffer} [params.certificate] - Certificate for APNS.
   * @param {string} [params.certificateContentType] - The content type of certificate.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationResponse>>}
   */
  public createDestination(
    params: EventNotificationsV1.CreateDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationResponse>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'name', 'type'];
    const _validParams = [
      'instanceId',
      'name',
      'type',
      'description',
      'config',
      'certificate',
      'certificateContentType',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const formData = {
      'name': _params.name,
      'type': _params.type,
      'description': _params.description,
      'config': _params.config,
      'certificate': {
        data: _params.certificate,
        contentType: _params.certificateContentType,
      },
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations',
        method: 'POST',
        path,
        formData,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'multipart/form-data',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Destinations.
   *
   * List all Destinations.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationList>>}
   */
  public listDestinations(
    params: EventNotificationsV1.ListDestinationsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationList>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId'];
    const _validParams = ['instanceId', 'limit', 'offset', 'search', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listDestinations'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get details of a Destination.
   *
   * Get details of a Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>>}
   */
  public getDestination(
    params: EventNotificationsV1.GetDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update details of a Destination.
   *
   * Update details of a Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {string} [params.name] - Destination name.
   * @param {string} [params.description] - Destination description.
   * @param {DestinationConfig} [params.config] - Payload describing a destination configuration.
   * @param {NodeJS.ReadableStream | Buffer} [params.certificate] - Certificate for APNS.
   * @param {string} [params.certificateContentType] - The content type of certificate.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>>}
   */
  public updateDestination(
    params: EventNotificationsV1.UpdateDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Destination>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = [
      'instanceId',
      'id',
      'name',
      'description',
      'config',
      'certificate',
      'certificateContentType',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const formData = {
      'name': _params.name,
      'description': _params.description,
      'config': _params.config,
      'certificate': {
        data: _params.certificate,
        contentType: _params.certificateContentType,
      },
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}',
        method: 'PATCH',
        path,
        formData,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'multipart/form-data',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Destination.
   *
   * Delete a Destination.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteDestination(
    params: EventNotificationsV1.DeleteDestinationParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteDestination'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(true, sdkHeaders, {}, _params.headers),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * destinationsPushDevices
   ************************/

  /**
   * Get list of Destination devices.
   *
   * Get list of Destination devices.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationDevicesList>>}
   */
  public listDestinationDevices(
    params: EventNotificationsV1.ListDestinationDevicesParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationDevicesList>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'limit', 'offset', 'search', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listDestinationDevices'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}/devices',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieves report of destination devices registered.
   *
   * Retrieves report of destination devices registered.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {number} [params.days] - Number of days report has to be generated from
   * * `Note :` Max value is 90
   * * Min or default value is 1.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationDevicesReport>>}
   */
  public getDestinationDevicesReport(
    params: EventNotificationsV1.GetDestinationDevicesReportParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationDevicesReport>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'days', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'days': _params.days,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getDestinationDevicesReport'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}/devices/report',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * destinationTagsSubscriptions
   ************************/

  /**
   * List all Tag Subscriptions for a device.
   *
   * List all Tag Subscriptions for a device.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {string} params.deviceId - DeviceID of the destination.
   * @param {string} [params.tagName] - TagName of the subscription.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.TagsSubscriptionList>>}
   */
  public listTagsSubscriptionsDevice(
    params: EventNotificationsV1.ListTagsSubscriptionsDeviceParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.TagsSubscriptionList>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id', 'deviceId'];
    const _validParams = ['instanceId', 'id', 'deviceId', 'tagName', 'limit', 'offset', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'tag_name': _params.tagName,
      'limit': _params.limit,
      'offset': _params.offset,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
      'device_id': _params.deviceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listTagsSubscriptionsDevice'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}/tag_subscriptions/devices/{device_id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Tag Subscriptions.
   *
   * List all Tag Subscriptions.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {string} [params.deviceId] - DeviceID of the destination tagsubscription.
   * @param {string} [params.userId] - UserID of the destination.
   * @param {string} [params.tagName] - TagName of the subscription.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.TagsSubscriptionList>>}
   */
  public listTagsSubscription(
    params: EventNotificationsV1.ListTagsSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.TagsSubscriptionList>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = [
      'instanceId',
      'id',
      'deviceId',
      'userId',
      'tagName',
      'limit',
      'offset',
      'search',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'device_id': _params.deviceId,
      'user_id': _params.userId,
      'tag_name': _params.tagName,
      'limit': _params.limit,
      'offset': _params.offset,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listTagsSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}/tag_subscriptions',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create a new Tag subscription.
   *
   * Create a new Tag subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {string} params.deviceId - Unique identifier of the device.
   * @param {string} params.tagName - The name of the tag its subscribed.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.DestinationTagsSubscriptionResponse>>}
   */
  public createTagsSubscription(
    params: EventNotificationsV1.CreateTagsSubscriptionParams
  ): Promise<
    EventNotificationsV1.Response<EventNotificationsV1.DestinationTagsSubscriptionResponse>
  > {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id', 'deviceId', 'tagName'];
    const _validParams = ['instanceId', 'id', 'deviceId', 'tagName', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'device_id': _params.deviceId,
      'tag_name': _params.tagName,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTagsSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}/tag_subscriptions',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Tag subcription.
   *
   * Delete a Tag subcription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Destination.
   * @param {string} [params.deviceId] - DeviceID of the destination tagsubscription.
   * @param {string} [params.tagName] - TagName of the subscription.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteTagsSubscription(
    params: EventNotificationsV1.DeleteTagsSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'deviceId', 'tagName', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'device_id': _params.deviceId,
      'tag_name': _params.tagName,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteTagsSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/destinations/{id}/tag_subscriptions',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(true, sdkHeaders, {}, _params.headers),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * subscriptions
   ************************/

  /**
   * Create a new Subscription.
   *
   * Create a new Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.name - Subscription name.
   * @param {string} params.destinationId - Destination ID.
   * @param {string} params.topicId - Topic ID.
   * @param {string} [params.description] - Subscription description.
   * @param {SubscriptionCreateAttributes} [params.attributes] -
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>>}
   */
  public createSubscription(
    params: EventNotificationsV1.CreateSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'name', 'destinationId', 'topicId'];
    const _validParams = [
      'instanceId',
      'name',
      'destinationId',
      'topicId',
      'description',
      'attributes',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'destination_id': _params.destinationId,
      'topic_id': _params.topicId,
      'description': _params.description,
      'attributes': _params.attributes,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all Subscriptions.
   *
   * List all Subscriptions.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {number} [params.offset] - offset for paginated results.
   * @param {number} [params.limit] - Page limit for paginated results.
   * @param {string} [params.search] - Search string for filtering results.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.SubscriptionList>>}
   */
  public listSubscriptions(
    params: EventNotificationsV1.ListSubscriptionsParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.SubscriptionList>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId'];
    const _validParams = ['instanceId', 'offset', 'limit', 'search', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'offset': _params.offset,
      'limit': _params.limit,
      'search': _params.search,
    };

    const path = {
      'instance_id': _params.instanceId,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listSubscriptions'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get details of a Subscription.
   *
   * Get details of a Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Subscription.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>>}
   */
  public getSubscription(
    params: EventNotificationsV1.GetSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions/{id}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a Subscription.
   *
   * Delete a Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Subscription.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>>}
   */
  public deleteSubscription(
    params: EventNotificationsV1.DeleteSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Empty>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions/{id}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(true, sdkHeaders, {}, _params.headers),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update details of a Subscription.
   *
   * Update details of a Subscription.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.instanceId - Unique identifier for IBM Cloud Event Notifications instance.
   * @param {string} params.id - Unique identifier for Subscription.
   * @param {string} [params.name] - Name of the subscription.
   * @param {string} [params.description] - Description of the subscription.
   * @param {SubscriptionUpdateAttributes} [params.attributes] -
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>>}
   */
  public updateSubscription(
    params: EventNotificationsV1.UpdateSubscriptionParams
  ): Promise<EventNotificationsV1.Response<EventNotificationsV1.Subscription>> {
    const _params = { ...params };
    const _requiredParams = ['instanceId', 'id'];
    const _validParams = ['instanceId', 'id', 'name', 'description', 'attributes', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'description': _params.description,
      'attributes': _params.attributes,
    };

    const path = {
      'instance_id': _params.instanceId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      EventNotificationsV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateSubscription'
    );

    const parameters = {
      options: {
        url: '/v1/instances/{instance_id}/subscriptions/{id}',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
}

/*************************
 * interfaces
 ************************/

namespace EventNotificationsV1 {
  /** An operation response. */
  export interface Response<T = any> {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface Empty {}

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `sendNotifications` operation. */
  export interface SendNotificationsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    body?: NotificationCreate;
    /** The Notification severity. */
    ceIbmenseverity?: string;
    /** The Notification default short text. */
    ceIbmendefaultshort?: string;
    /** The Notification default long text. */
    ceIbmendefaultlong?: string;
    /** The FCM Notification body. */
    ceIbmenfcmbody?: string;
    /** The APNS Notification body. */
    ceIbmenapnsbody?: string;
    /** Push Notifications Targets. */
    ceIbmenpushto?: string;
    /** Push Notifications APNS Headers. */
    ceIbmenapnsheaders?: string;
    /** Push Notifications Chrome body. */
    ceIbmenchromebody?: string;
    /** Push Notifications Firefox body. */
    ceIbmenfirefoxbody?: string;
    /** Push Notifications Chrome Headers. */
    ceIbmenchromeheaders?: string;
    /** Push Notifications Firefox Headers. */
    ceIbmenfirefoxheaders?: string;
    /** Event Notifications Target source ID. */
    ceIbmensourceid?: string;
    /** custom ID to track notifications from client side (Mandatory identifier for the binary mode). */
    ceId?: string;
    /** custom source odentifier from the client side. */
    ceSource?: string;
    /** Type identifier for source filters. */
    ceType?: string;
    /** Version of the Cloud Event specification (Mandatory header to make the request Binary Mode). */
    ceSpecversion?: string;
    /** The time of the notification. */
    ceTime?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `sendBulkNotifications` operation. */
  export interface SendBulkNotificationsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** List of notifications body. */
    bulkMessages?: NotificationCreate[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createSources` operation. */
  export interface CreateSourcesParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Name of the source. */
    name: string;
    /** Description of the source. */
    description: string;
    /** Whether the source is enabled or not. */
    enabled?: boolean;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listSources` operation. */
  export interface ListSourcesParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getSource` operation. */
  export interface GetSourceParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Source. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteSource` operation. */
  export interface DeleteSourceParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Source. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateSource` operation. */
  export interface UpdateSourceParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Source. */
    id: string;
    /** Name of the source. */
    name?: string;
    /** Description of the source. */
    description?: string;
    /** Whether the source is enabled or not. */
    enabled?: boolean;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTopic` operation. */
  export interface CreateTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Name of the topic. */
    name: string;
    /** Description of the topic. */
    description?: string;
    /** List of sources. */
    sources?: TopicUpdateSourcesItem[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTopics` operation. */
  export interface ListTopicsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTopic` operation. */
  export interface GetTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Topic. */
    id: string;
    /** Include sub topics. */
    include?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `replaceTopic` operation. */
  export interface ReplaceTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Topic. */
    id: string;
    /** Name of the topic. */
    name?: string;
    /** Description of the topic. */
    description?: string;
    /** List of sources. */
    sources?: TopicUpdateSourcesItem[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteTopic` operation. */
  export interface DeleteTopicParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Topic. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createDestination` operation. */
  export interface CreateDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** The Destintion name. */
    name: string;
    /** The type of Destination Webhook. */
    type: CreateDestinationConstants.Type | string;
    /** The Destination description. */
    description?: string;
    /** Payload describing a destination configuration. */
    config?: DestinationConfig;
    /** Certificate for APNS. */
    certificate?: NodeJS.ReadableStream | Buffer;
    /** The content type of certificate. */
    certificateContentType?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createDestination` operation. */
  export namespace CreateDestinationConstants {
    /** The type of Destination Webhook. */
    export enum Type {
      WEBHOOK = 'webhook',
      PUSH_ANDROID = 'push_android',
      PUSH_IOS = 'push_ios',
      PUSH_CHROME = 'push_chrome',
      PUSH_FIREFOX = 'push_firefox',
      SLACK = 'slack',
    }
  }

  /** Parameters for the `listDestinations` operation. */
  export interface ListDestinationsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getDestination` operation. */
  export interface GetDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateDestination` operation. */
  export interface UpdateDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** Destination name. */
    name?: string;
    /** Destination description. */
    description?: string;
    /** Payload describing a destination configuration. */
    config?: DestinationConfig;
    /** Certificate for APNS. */
    certificate?: NodeJS.ReadableStream | Buffer;
    /** The content type of certificate. */
    certificateContentType?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteDestination` operation. */
  export interface DeleteDestinationParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listDestinationDevices` operation. */
  export interface ListDestinationDevicesParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getDestinationDevicesReport` operation. */
  export interface GetDestinationDevicesReportParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** Number of days report has to be generated from * `Note :` Max value is 90 * Min or default value is 1. */
    days?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTagsSubscriptionsDevice` operation. */
  export interface ListTagsSubscriptionsDeviceParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** DeviceID of the destination. */
    deviceId: string;
    /** TagName of the subscription. */
    tagName?: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTagsSubscription` operation. */
  export interface ListTagsSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** DeviceID of the destination tagsubscription. */
    deviceId?: string;
    /** UserID of the destination. */
    userId?: string;
    /** TagName of the subscription. */
    tagName?: string;
    /** Page limit for paginated results. */
    limit?: number;
    /** offset for paginated results. */
    offset?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTagsSubscription` operation. */
  export interface CreateTagsSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** Unique identifier of the device. */
    deviceId: string;
    /** The name of the tag its subscribed. */
    tagName: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteTagsSubscription` operation. */
  export interface DeleteTagsSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Destination. */
    id: string;
    /** DeviceID of the destination tagsubscription. */
    deviceId?: string;
    /** TagName of the subscription. */
    tagName?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createSubscription` operation. */
  export interface CreateSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Subscription name. */
    name: string;
    /** Destination ID. */
    destinationId: string;
    /** Topic ID. */
    topicId: string;
    /** Subscription description. */
    description?: string;
    attributes?: SubscriptionCreateAttributes;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listSubscriptions` operation. */
  export interface ListSubscriptionsParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** offset for paginated results. */
    offset?: number;
    /** Page limit for paginated results. */
    limit?: number;
    /** Search string for filtering results. */
    search?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getSubscription` operation. */
  export interface GetSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Subscription. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteSubscription` operation. */
  export interface DeleteSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Subscription. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateSubscription` operation. */
  export interface UpdateSubscriptionParams {
    /** Unique identifier for IBM Cloud Event Notifications instance. */
    instanceId: string;
    /** Unique identifier for Subscription. */
    id: string;
    /** Name of the subscription. */
    name?: string;
    /** Description of the subscription. */
    description?: string;
    attributes?: SubscriptionUpdateAttributes;
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** Payload describing a notifications response. */
  export interface BulkNotificationResponse {
    /** Bulk Notification ID. */
    bulk_notification_id?: string;
    /** List of Notifications. */
    bulk_messages?: any[];
  }

  /** Payload describing a destination get request. */
  export interface Destination {
    /** Destination ID. */
    id: string;
    /** Destination name. */
    name: string;
    /** Destination description. */
    description: string;
    /** Destination type Email/SMS/Webhook/FCM. */
    type: string;
    /** Payload describing a destination configuration. */
    config?: DestinationConfig;
    /** Last updated time. */
    updated_at: string;
    /** Number of subscriptions. */
    subscription_count: number;
    /** List of subscriptions. */
    subscription_names: string[];
  }

  /** Payload describing a destination configuration. */
  export interface DestinationConfig {
    params: DestinationConfigParams;
  }

  /** DestinationConfigParams. */
  export interface DestinationConfigParams {}

  /** Payload describing a destination devices list request. */
  export interface DestinationDevicesList {
    /** Total number of destination devices. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show destination devices. */
    limit: number;
    /** List of devices. */
    devices: DestinationDevicesListItem[];
  }

  /** device object. */
  export interface DestinationDevicesListItem {
    /** device ID. */
    id: string;
    /** user ID. */
    user_id?: string;
    /** Destination platform. */
    platform: string;
    /** Destination device token. */
    token: string;
    /** Updated at. */
    updated_at: string;
  }

  /** Payload describing a destination devices report. */
  export interface DestinationDevicesReport {
    /** Android Devices Registered. */
    android: number;
    /** ios Devices Registered. */
    ios: number;
    /** chrome web Devices Registered. */
    chrome: number;
    /** firefox web Devices Registered. */
    firefox: number;
    /** safari web Devices Registered. */
    safari: number;
    /** chromeAppExt Devices Registered. */
    chromeAppExt: number;
    /** Total Devices Registered. */
    all: number;
  }

  /** Payload describing a destination list request. */
  export interface DestinationList {
    /** Total number of destinations. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show destinations. */
    limit: number;
    /** List of destinations. */
    destinations: DestinationListItem[];
  }

  /** Destination object. */
  export interface DestinationListItem {
    /** Destination ID. */
    id: string;
    /** Destination name. */
    name: string;
    /** Destination description. */
    description: string;
    /** Destination type Email/SMS/Webhook. */
    type: string;
    /** Subscription count. */
    subscription_count: number;
    /** Names of subscriptions. */
    subscription_names: string[];
    /** Updated at. */
    updated_at: string;
  }

  /** Payload describing a destination get request. */
  export interface DestinationResponse {
    /** Destination ID. */
    id: string;
    /** Destination name. */
    name: string;
    /** Destination description. */
    description: string;
    /** Destination type Email/SMS/Webhook. */
    type: string;
    /** Payload describing a destination configuration. */
    config: DestinationConfig;
    /** Last updated time. */
    created_at: string;
  }

  /** Payload describing a destination get request. */
  export interface DestinationTagsSubscriptionResponse {
    /** Subscription Tag ID. */
    id: string;
    /** Unique identifier of the device. */
    device_id: string;
    /** The name of the tag its subscribed. */
    tag_name: string;
    /** The user identifier for the the device registration. */
    user_id?: string;
    /** Last updated time. */
    created_at: string;
  }

  /** The email ids. */
  export interface EmailUpdateAttributesTo {
    /** The email ids. */
    add?: string[];
    /** The email ids for removal. */
    remove?: string[];
  }

  /** The email ids. */
  export interface EmailUpdateAttributesUnsubscribed {
    /** The email ids unsubscribed. */
    remove?: string[];
  }

  /** Payload describing a notification create request. */
  export interface NotificationCreate {
    /** The Notifications data for webhook. */
    data?: JsonObject;
    /** The Notifications id. */
    ibmenseverity?: string;
    /** The Notifications FCM body. */
    ibmenfcmbody?: string;
    /** The Notifications APNS body. */
    ibmenapnsbody?: string;
    /** This field should not be empty. The allowed fields are fcm_devices, apns_devices, chrome_devices,
     *  firefox_devices, platforms, tags and user_ids. If platforms or tags or user_ids are being used then do not use
     *  fcm_devices / apns_devices / chrome_devices / firefox_devices with it.
     */
    ibmenpushto?: string;
    /** Headers for an APNs notification. */
    ibmenapnsheaders?: string;
    /** Default short text for the message. */
    ibmendefaultshort?: string;
    /** Default long text for the message. */
    ibmendefaultlong?: string;
    /** The Notifications Chrome body. */
    ibmenchromebody?: string;
    /** The Notifications Firefox body. */
    ibmenfirefoxbody?: string;
    /** Headers for a Chrome notification. */
    ibmenchromeheaders?: string;
    /** Headers for an FireFox notification. */
    ibmenfirefoxheaders?: string;
    /** The Event Notifications source id. */
    ibmensourceid?: string;
    /** The Notifications content type. */
    datacontenttype?: string;
    /** The Notifications subject. */
    subject?: string;
    /** The Notifications id. */
    id?: string;
    /** The source of Notifications. */
    source?: string;
    /** The Notifications type. */
    type?: string;
    /** The Notifications specversion. */
    specversion?: string;
    /** The Notifications time. */
    time?: string;
    /** NotificationCreate accepts additional properties. */
    [propName: string]: any;
  }

  /** Payload describing a notifications response. */
  export interface NotificationResponse {
    /** Notification ID. */
    notification_id?: string;
  }

  /** Rule object. */
  export interface Rules {
    /** Whether the rule is enabled or not. */
    enabled?: boolean;
    /** Event type filter. */
    event_type_filter: string;
    /** Notification filter. */
    notification_filter?: string;
  }

  /** Rule object. */
  export interface RulesGet {
    /** Whether the rule is enabled or not. */
    enabled: boolean;
    /** Event type filter. */
    event_type_filter: string;
    /** Notification filter. */
    notification_filter: string;
    /** Last time the topic was updated. */
    updated_at: string;
    /** Autogenerated rule ID. */
    id: string;
  }

  /** Payload describing a source generate request. */
  export interface Source {
    /** The id of the source. */
    id: string;
    /** The name of the source. */
    name: string;
    /** The description of the source. */
    description: string;
    /** The status of the source. */
    enabled: boolean;
    /** Type of the source. */
    type: string;
    /** The last updated time of the source. */
    updated_at: string;
    /** The number of topics. */
    topic_count: number;
    /** The names of the topics. */
    topic_names: string[];
  }

  /** Payload describing a source list request. */
  export interface SourceList {
    /** Number of sources. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show sources. */
    limit: number;
    /** List of sources. */
    sources: SourceListItem[];
  }

  /** Payload describing a source list item. */
  export interface SourceListItem {
    /** ID of the source. */
    id: string;
    /** Name of the source. */
    name: string;
    /** Description of the source. */
    description: string;
    /** Type of the source. */
    type: string;
    /** Whether the source is enabled or not. */
    enabled: boolean;
    /** Time of the last update. */
    updated_at: string;
    /** Number of topics. */
    topic_count: number;
  }

  /** Payload describing a source. */
  export interface SourceResponse {
    /** ID of the source. */
    id: string;
    /** Name of the source. */
    name: string;
    /** Description of the source. */
    description: string;
    /** Whether the source is enabled or not. */
    enabled: boolean;
    /** Time of the created. */
    created_at: string;
  }

  /** SourcesListItem. */
  export interface SourcesListItem {
    /** ID of the source. */
    id: string;
    /** Name of the source. */
    name: string;
    /** List of rules. */
    rules: RulesGet[];
  }

  /** Subscription object. */
  export interface Subscription {
    /** Subscription ID. */
    id: string;
    /** Subscription name. */
    name: string;
    /** Subscription description. */
    description: string;
    /** Last updated time. */
    updated_at: string;
    /** From Email ID (it will be displayed only in case of smtp_ibm destination type). */
    from?: string;
    /** The type of destination. */
    destination_type: string;
    /** The destination ID. */
    destination_id: string;
    /** The destination name. */
    destination_name: string;
    /** Topic ID. */
    topic_id: string;
    /** Topic name. */
    topic_name: string;
    attributes?: SubscriptionAttributes;
    /** Subscription accepts additional properties. */
    [propName: string]: any;
  }

  /** SubscriptionAttributes. */
  export interface SubscriptionAttributes {
    /** SubscriptionAttributes accepts additional properties. */
    [propName: string]: any;
  }

  /** SubscriptionCreateAttributes. */
  export interface SubscriptionCreateAttributes {}

  /** Subscription list object. */
  export interface SubscriptionList {
    /** Number of subscriptions. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show subscriptions. */
    limit: number;
    /** List of subscriptions. */
    subscriptions: SubscriptionListItem[];
  }

  /** Subscription list item. */
  export interface SubscriptionListItem {
    /** ID of the subscription. */
    id: string;
    /** Name of the subscription. */
    name: string;
    /** Description of the subscription. */
    description: string;
    /** ID of the destination. */
    destination_id: string;
    /** Name of the destination. */
    destination_name?: string;
    /** The type of destination. */
    destination_type: string;
    /** ID of the topic. */
    topic_id: string;
    /** Name of the topic. */
    topic_name?: string;
    /** Last updated time of the subscription. */
    updated_at: string;
  }

  /** SubscriptionUpdateAttributes. */
  export interface SubscriptionUpdateAttributes {}

  /** Payload describing a tags list request. */
  export interface TagsSubscriptionList {
    /** Total number of tags. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show tags. */
    limit: number;
    /** List of tags. */
    tag_subscriptions: TagsSubscriptionListItem[];
  }

  /** Tags subscription object. */
  export interface TagsSubscriptionListItem {
    /** Subscription Tag ID. */
    id: string;
    /** Unique identifier of the device. */
    device_id: string;
    /** The name of the tag its subscribed. */
    tag_name: string;
    /** The user identifier for the the device registration. */
    user_id?: string;
    /** Updated at. */
    updated_at: string;
  }

  /** Topic object. */
  export interface Topic {
    /** Autogenerated topic ID. */
    id: string;
    /** Description of the topic. */
    description: string;
    /** Name of the topic. */
    name: string;
    /** Last time the topic was updated. */
    updated_at: string;
    /** Number of sources. */
    source_count: number;
    /** List of sources. */
    sources: SourcesListItem[];
    /** Number of subscriptions. */
    subscription_count: number;
    /** List of subscriptions. */
    subscriptions: SubscriptionListItem[];
  }

  /** Topic list object. */
  export interface TopicList {
    /** Number of topics. */
    total_count: number;
    /** Current offset. */
    offset: number;
    /** limit to show subscriptions. */
    limit: number;
    /** List of topics. */
    topics: TopicsListItem[];
  }

  /** Topic object. */
  export interface TopicResponse {
    /** Autogenerated topic ID. */
    id: string;
    /** Name of the topic. */
    name: string;
    /** Description of the topic. */
    description: string;
    /** Last time the topic was updated. */
    created_at: string;
  }

  /** TopicUpdateSourcesItem. */
  export interface TopicUpdateSourcesItem {
    /** ID of the source. */
    id: string;
    /** List of rules. */
    rules: Rules[];
  }

  /** Topic list item object. */
  export interface TopicsListItem {
    /** Autogenerated topic ID. */
    id: string;
    /** Name of the topic. */
    name: string;
    /** Description of the topic. */
    description: string;
    /** Number of sources. */
    source_count: number;
    /** List of source names. */
    sources_names: string[];
    /** Number of subscriptions. */
    subscription_count: number;
  }

  /** Payload describing a Chrome destination configuration. */
  export interface DestinationConfigParamsChromeDestinationConfig extends DestinationConfigParams {
    /** FCM api_key. */
    api_key: string;
    /** Website url. */
    website_url: string;
    /** Chrome VAPID public key. */
    public_key?: string;
  }

  /** Payload describing a FCM destination configuration. */
  export interface DestinationConfigParamsFCMDestinationConfig extends DestinationConfigParams {
    /** FCM server_key. */
    server_key: string;
    /** FCM sender_id. */
    sender_id: string;
  }

  /** Payload describing a Firefox destination configuration. */
  export interface DestinationConfigParamsFirefoxDestinationConfig extends DestinationConfigParams {
    /** Website url. */
    website_url: string;
    /** Chrome VAPID public key. */
    public_key?: string;
  }

  /** Payload describing a IOS destination configuration. */
  export interface DestinationConfigParamsIOSDestinationConfig extends DestinationConfigParams {
    /** Authentication type (p8 or p12). */
    cert_type: string;
    /** Sandbox mode for IOS destinations. */
    is_sandbox: boolean;
    /** Password for certificate (Required when cert_type is p12). */
    password?: string;
    /** Key ID for token (Required when cert_type is p8). */
    key_id?: string;
    /** Team ID for token (Required when cert_type is p8). */
    team_id?: string;
    /** Bundle ID for token (Required when cert_type is p8). */
    bundle_id?: string;
  }

  /** Payload describing a slack destination configuration. */
  export interface DestinationConfigParamsSlackDestinationConfig extends DestinationConfigParams {
    /** URL of Slack Incoming Webhook. */
    url: string;
  }

  /** Payload describing a webhook destination configuration. */
  export interface DestinationConfigParamsWebhookDestinationConfig extends DestinationConfigParams {
    /** URL of webhook. */
    url: string;
    /** HTTP method of webhook. */
    verb: string;
    /** Custom headers (Key-Value pair) for webhook call. */
    custom_headers?: JsonObject;
    /** List of sensitive headers from custom headers. */
    sensitive_headers?: string[];
  }

  /** The attributes reponse for an email destination. */
  export interface SubscriptionAttributesEmailAttributesResponse extends SubscriptionAttributes {}

  /** SMS attributes object. */
  export interface SubscriptionAttributesSMSAttributesResponse extends SubscriptionAttributes {}

  /** The attributes for a slack notification. */
  export interface SubscriptionAttributesSlackAttributesResponse extends SubscriptionAttributes {
    /** Attachment Color for Slack Notification. */
    attachment_color: string;
  }

  /** The attributes for a webhook notification. */
  export interface SubscriptionAttributesWebhookAttributesResponse extends SubscriptionAttributes {
    /** Signing webhook attributes. */
    signing_enabled: boolean;
    /** Decision for Notification Payload to be added. */
    add_notification_payload: boolean;
  }

  /** The attributes for an email notification. */
  export interface SubscriptionCreateAttributesEmailAttributes
    extends SubscriptionCreateAttributes {
    /** The email id string. */
    to: string[];
    /** Whether to add the notification payload to the email. */
    add_notification_payload: boolean;
    /** The email address to reply to. */
    reply_to_mail: string;
    /** The email name to reply to. */
    reply_to_name: string;
    /** The email name of From. */
    from_name: string;
  }

  /** The attributes for an FCM notification. */
  export interface SubscriptionCreateAttributesFCMAttributes extends SubscriptionCreateAttributes {}

  /** SMS attributes object. */
  export interface SubscriptionCreateAttributesSMSAttributes extends SubscriptionCreateAttributes {
    /** The phone number to send the SMS to. */
    to: string[];
  }

  /** The attributes for a slack notification. */
  export interface SubscriptionCreateAttributesSlackAttributes
    extends SubscriptionCreateAttributes {
    /** Attachment Color for the slack message. */
    attachment_color: string;
  }

  /** The attributes for a webhook notification. */
  export interface SubscriptionCreateAttributesWebhookAttributes
    extends SubscriptionCreateAttributes {
    /** Signing webhook attributes. */
    signing_enabled: boolean;
  }

  /** The attributes for an email notification. */
  export interface SubscriptionUpdateAttributesEmailUpdateAttributes
    extends SubscriptionUpdateAttributes {
    /** The email ids. */
    to: EmailUpdateAttributesTo;
    /** Whether to add the notification payload to the email. */
    add_notification_payload: boolean;
    /** The email address to reply to. */
    reply_to_mail: string;
    /** The email name to reply to. */
    reply_to_name: string;
    /** The email name of From. */
    from_name: string;
    /** The email ids invited. */
    invited?: string[];
    /** The email ids. */
    unsubscribed?: EmailUpdateAttributesUnsubscribed;
  }

  /** SMS attributes object. */
  export interface SubscriptionUpdateAttributesSMSAttributes extends SubscriptionUpdateAttributes {
    /** The phone number to send the SMS to. */
    to: string[];
  }

  /** The attributes for a slack notification. */
  export interface SubscriptionUpdateAttributesSlackAttributes
    extends SubscriptionUpdateAttributes {
    /** Attachment Color for the slack message. */
    attachment_color: string;
  }

  /** The attributes for a webhook notification. */
  export interface SubscriptionUpdateAttributesWebhookAttributes
    extends SubscriptionUpdateAttributes {
    /** Signing webhook attributes. */
    signing_enabled: boolean;
  }
}

export = EventNotificationsV1;
